# -*- coding: utf-8 -*-
"""real-time-chess-pieces-detection-with-yolov8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pox4AcBVweySgYVj8Ke-ek9SF8iIqPnC

<p style="text-align:center;"><span style="font-size:48px;"><span style="color:black;"><span style="font-family:cursive;"> Hello everyone! </span> </span>  </span></p>
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install ultralytics

import ultralytics

from ultralytics import YOLO
import os
from PIL import Image
import cv2
from IPython.display import Video
import glob
import matplotlib.pyplot as plt

import warnings
warnings.filterwarnings('ignore')


ultralytics.checks()

"""<a id="5"></a>
# <p style="padding:10px;background-color:black ;margin:0;color:#ffffff;font-family:newtimeroman;font-size:100%;text-align:center;border-radius: 15px 50px;overflow:hidden;font-weight:500">Calling the Pretrained YOLOv8 and the Dataset</p>

![Screenshot (116).png](attachment:18ab0a33-2c91-485a-8dbf-72c9767cbb5f.png)
"""

model = YOLO('yolov8s.pt')

Root_dir = r'/content/drive/MyDrive/Chess scanner Project/Chess_pieces'

yaml_path = os.path.join(Root_dir, 'data.yaml.yaml')

train_path = os.path.join(Root_dir, 'train', 'images')
valid_path = os.path.join(Root_dir, 'valid', 'images')

results = model.train(
    data=yaml_path,
    epochs=15,
    batch=32,
    lr0=0.0001,
    lrf=0.1,
    imgsz=640,
    plots= True
)

"""<div style = 'border : 4px solid non; background-color:#f2f2f2 ; ;padding:10px'>

<strong>Lets see some of our outputs:<strong>
    
"""

data_dir = "/content/drive/MyDrive/Chess scanner Project/Chess_pieces/train"
img_dir = os.path.join(data_dir, '*g')
files = glob.glob(img_dir)
imgs = []
for image in files:
    img = cv2.imread(image)
    imgs.append(img)
    plt.figure(figsize=(10,10), dpi= 200)
    plt.imshow(img)

"""<div style = 'border : 4px solid non; background-color:#f2f2f2 ; ;padding:10px'>

<strong>Fascinating!!<strong>
    
It is characteristic that the model was able to recognize the chess pieces and identify them. Now let's give this model a picture of the same data that was not included in the training process to see how it predicts.
"""

image_test_path = '/content/drive/MyDrive/Chess scanner Project/Chess_pieces/test/7a34d8620235048917b28bcfd3b5572b_jpg.rf.450c577e3be66b5232c54ffc9ec9e6b7.jpg'

results = model.predict(source=image_test_path,
                        imgsz=640)

test_image = results[0].plot(line_width=2)
plt.imshow(test_image)

"""<div style = 'border : 4px solid non; background-color:#f2f2f2 ; ;padding:10px'>

<strong>Perfect!!<strong>
    
<strong>Now a question??<strong>

What if we want to use an other board and chess pieces? Let's see how the result will be in the form of a video.


"""

example_video_path = '/content/drive/MyDrive/Chess scanner Project/Chess_pieces/Chess_video_example.mp4'

video_output = model.predict(source=example_video_path, conf=0.6,save=True)

"""<a id="6"></a>
# <p style="padding:10px;background-color:black ;margin:0;color:#ffffff;font-family:newtimeroman;font-size:100%;text-align:center;border-radius: 15px 50px;overflow:hidden;font-weight:500">Conclusion</p>
"""